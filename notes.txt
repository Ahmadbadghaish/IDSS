i want to make a website with 3 web pages
I have a project that requires me to analyse human hehavour using "big 5 test" in order to form cohasive team for a team project
first page in the main page that has many subpages that gives the user an intro about the project and a link to the page of that project. and give the user the ability to add new project.
the page should look something like this:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subpages</title>
    <link rel="stylesheet" href="stlyes.css">
</head>
<body>
    <header>
        <h1 class="header-title">Subpages</h1>
        <nav>
            <ul class="nav-list">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#services">Services</a></li>
                <li><a href="#contact">Contact</a></li>
                <li><a href="#portfolio">Portfolio</a></li>
            </ul>
        </nav>
    </header>

    <div id="container">
    </div>

    <div id="instructions" class="instructions">
        <p>Click "Add" to create a new subpage. Click on a subpage to view its content.</p>
    </div>

    <button id="addBtn" class="add-button">Add</button>


<section id="services" class="content-section center-content colored-section">
    <div class="content-container">
        <h2>Our Services</h2>
        <ul>
            <li>one</li>
            <li>two</li>
            <li>three</li>
            <li>four</li>
        </ul>
    </div>
</section>


    <section id="contact" class="content-section center-content">
        <div class="contact-container">
            <h2>Contact Us</h2>
            <p>Get in touch with us for any inquiries or assistance.</p>
            <button id="contactBtn" class="contact-button">Contact Us</button>
        </div>
    </section>

    <script src="function.js"></script>
</body>
</html>

document.addEventListener('DOMContentLoaded', function () {
  const addBtn = document.querySelector('#addBtn');
  const container = document.querySelector('#container');

  function createSubpage() {
    const subpage = document.createElement('div');
    subpage.classList.add('subpage');

    const title = document.createElement('h2');
    title.textContent = `Subpage ${container.children.length + 1}`;

    const content = document.createElement('p');
    content.textContent = 'Content for the subpage. You can put any information here.';

    const redirectBtn = document.createElement('a');
    redirectBtn.textContent = 'Go to page';
    redirectBtn.href = 'http://www.example.com'; // Update the URL
    redirectBtn.classList.add('redirectBtn');
    redirectBtn.target = '_blank';

    subpage.appendChild(title);
    subpage.appendChild(content);
    subpage.appendChild(redirectBtn);

    title.addEventListener('click', function () {
      content.style.display = content.style.display === 'block' ? 'none' : 'block';
    });

    container.appendChild(subpage);
  }

  addBtn.addEventListener('click', createSubpage);
});


body, h1, h2, p, ul, li {
  margin: 0;
  padding: 0;
  font-family: 'Arial', sans-serif;
  box-sizing: border-box;
}

body {
  background-color: #f5f5f5;
  color: #333;
  text-align: center;
  margin: 0;
  padding: 0;
  line-height: 1.6;
}

header {
  background: linear-gradient(45deg, #007bff, #00aaff);
  color: white;
  padding: 20px 0;
  text-align: center;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

.header-title {
  font-size: 2em;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 3px;
  margin-bottom: 20px;
}

nav {
  background: linear-gradient(to right, #007bff, #00aaff);
  border-bottom: 5px solid #0056b3;
  display: flex;
  justify-content: center;
  padding: 10px 0;
}

.nav-list {
  list-style: none;
  display: flex;
  margin: 0;
  padding: 0;
}

.nav-list li {
  margin-right: 20px;
}

.nav-list a {
  text-decoration: none;
  color: white;
  font-weight: bold;
  font-size: 1.2em;
  transition: color 0.3s;
}

.nav-list a:hover {
  color: #0056b3;
}

#container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  padding: 20px;
}

.subpage {
  width: calc(33.33% - 20px);
  margin: 10px;
  background-color: #fff;
  padding: 20px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
}

.subpage h2 {
  font-size: 1.8em;
  font-weight: bold;
  color: #333;
  margin-bottom: 10px;
}

.subpage p {
  color: #555;
  font-size: 1.2em;
}

.add-button, .contact-button {
  display: block;
  text-align: center;
  background: linear-gradient(to right, #007bff, #00aaff);
  color: white;
  padding: 10px 20px;
  text-decoration: none;
  border: none;
  border-radius: 5px;
  font-size: 1.2em;
  transition: background-color 0.3s;
  margin: 0 auto;
  display: block;
  margin-top: 20px;
  cursor: pointer;
}

.add-button:hover, .contact-button:hover {
  background: linear-gradient(to right, #0056b3, #00aaff);
}

.instructions {
  font-size: 1.2em;
  text-align: center;
  margin-top: 20px;
}


i dont like the style of css
can you copy the style of this picture: <picture>





second page is the page that allow user to add CSV file to initiate the first data to create the project
 the page recieves a CSV file and convert the data into cloud (firebase)

 the CSV file look something like: 
 ID,neuroticism_scores,extroversion_scores,openness_scores,agreeableness_scores,conscientiousness_scores
1,20.84,51.96,45.72,45.53,34.6
2,22.39,54.07,55.71,41.56,44.16
3,23.75,57.8,42.42,65.82,49.34
4,9.7,45.27,44.58,58.71,40.88
5,11.85,44.53,46.97,40.71,47.39
6,7.25,60,47.58,47.5,41.18
7,7.7,49.53,45.13,60.84,42

 convert data from CVS to a cloud-based noSQL database, in the backend of wen application (node.js)
 and cloud is firebase



before moving to the 3rd page 
there some calculation that need be done in the back-end
from the data in the CSV i need to calculate the average score of each trait
classify each person as above and below average
the code might look something like this:

import csv
from statistics import mean

# Step 1: Read data from CSV
filename = 'yourfile.csv'  # replace with your actual filename
data = []
traits = ['Neuroticism', 'Extroversion', 'Openness to Experience', 'Agreeableness', 'Conscientiousness']
trait_scores = {trait: [] for trait in traits}

try:
    with open(filename, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            data.append(row)
            for trait in traits:
                # Populate the trait_scores dictionary for later processing
                trait_scores[trait].append(float(row[trait]))

except FileNotFoundError:
    print(f"{filename} not found.")

# Step 2: Calculate the average for each trait
averages = {trait: mean(scores) for trait, scores in trait_scores.items()}

# Step 3: Classify each person
for person in data:
    person_id = person['ID']
    print(f"Person {person_id} classification:")
    for trait in traits:
        person_trait_score = float(person[trait])
        average_trait_score = averages[trait]

        classification = 'above average' if person_trait_score > average_trait_score else 'below average'
        print(f"- {trait}: {classification}")

# For debugging or review, you might want to print out the averages.
print("\nAverages for each trait:")
for trait, average in averages.items():
    print(f"- {trait}: {average}")



make a class of a person where a person object has:
ID, name,
intetger scores of Neuroticism, Extroversion, Openness to Experience, Agreeableness, Conscientiousness
string levels of Neuroticism, Extroversion, Openness to Experience, Agreeableness, Conscientiousness
code might look something like:
class Person:
    def __init__(self, identifier, name):
        self.id = identifier
        self.name = name
        
        # Scores
        self.scores = {
            'Neuroticism': 0,
            'Extroversion': 0,
            'Openness': 0,
            'Agreeableness': 0,
            'Conscientiousness': 0
        }
        
        # Levels
        self.levels = {
            'Neuroticism': None,
            'Extroversion': None,
            'Openness': None,
            'Agreeableness': None,
            'Conscientiousness': None
        }

    def set_score(self, trait, score):
        """Set the score for a given trait."""
        if trait in self.scores and isinstance(score, int):
            self.scores[trait] = score
            self.levels[trait] = self.determine_level(score)
        else:
            raise ValueError("Invalid trait or score type.")

    def determine_level(self, score):
        """Determine the level descriptor based on the score."""
        # The conditions here are arbitrary; you might determine levels based on specific cut-off points or criteria
        if score < 35:
            return 'Low'
        elif 35 <= score < 65:
            return 'Medium'
        else:
            return 'High'
        
    def get_score(self, trait):
        """Get the score for a given trait."""
        return self.scores.get(trait, None)

    def get_level(self, trait):
        """Get the level descriptor for a given trait."""
        return self.levels.get(trait, None)

# Example usage:
person1 = Person(1, 'Alice')
person1.set_score('Neuroticism', 70)
person1.set_score('Extroversion', 50)

print(f"Person ID: {person1.id}")
print(f"Name: {person1.name}")
for trait in person1.scores:
    print(f"{trait} Score: {person1.get_score(trait)}, Level: {person1.get_level(trait)}")

 make a class for "team", we each team has a list of persons/members and team scores

 class Team:
    def __init__(self, team_name):
        self.team_name = team_name
        self.members = []  # This will store Person objects

    def add_member(self, person):
        if isinstance(person, Person):
            self.members.append(person)
        else:
            raise TypeError("Must add an instance of Person.")

    def calculate_team_scores(self):
        # Initialize a dictionary to store summed scores
        total_scores = {'Neuroticism': 0, 'Extroversion': 0, 'Openness': 0, 'Agreeableness': 0, 'Conscientiousness': 0}
        
        for member in self.members:
            for trait, score in member.scores.items():
                # Sum the scores of each member for each trait
                if trait in total_scores:
                    total_scores[trait] += score
                else:
                    # Handle cases where a new trait is encountered
                    total_scores[trait] = score

        # If needed, you can calculate the average scores for the team by dividing by the number of members
        avg_scores = {trait: score / len(self.members) for trait, score in total_scores.items()}

        return avg_scores

    def get_team_info(self):
        print(f"Team Name: {self.team_name}")
        print("Members:")
        for member in self.members:
            print(f" - {member.name} (ID: {member.id})")

        # Print the team scores
        print("Average Team Scores:")
        for trait, score in self.calculate_team_scores().items():
            print(f" - {trait}: {score:.2f}")

# Usage example
person1 = Person(1, "Alice", {'Neuroticism': 10, 'Extroversion': 8, 'Openness': 9, 'Agreeableness': 7, 'Conscientiousness': 8})
person2 = Person(2, "Bob", {'Neuroticism': 7, 'Extroversion': 9, 'Openness': 8, 'Agreeableness': 6, 'Conscientiousness': 9})

team = Team("Innovators")
team.add_member(person1)
team.add_member(person2)

team.get_team_info()


now after we have team and person classes
we can classify team members based on mean and standard deviation
for example: 
every one who has Openness > mean, they they are considered high on Openness regarding their environment
another way is using SD:
if person is above (µ + σ) then he's high on Openness
if person is below (µ - σ) then he's low on Openness
if person is above (µ - σ) and below (µ + σ) then he's medium on Openness

and this applies to other traits

now after each one is classified
we use constraints staisfaction problem to put person in team, so no two person with high [trait] will be in the same team
you can add constraints that you think it'll help the team be more cohasive and please explain the code of CSP


i want to make python code that make the decision matrx to select a leader depending on big five test score
the weight of neuroticism_scores is 2
the weight of conscientiousness_scoresis 4
the weight of agreeableness_scores	-1
the weight of other traits is 1
code might look something like this:
import pandas as pd

# Step 1: Load the CSV data
# Replace 'path/to/your/file.csv' with the actual path to your CSV file
data = pd.read_csv('path/to/your/file.csv', delimiter='\t')  # assuming the data is tab-separated

# Step 2: Define the weights for each trait
weights = {
    'neuroticism_scores': 2,
    'extroversion_scores': 1,
    'openness_scores': 1,
    'agreeableness_scores': -1,
    'conscientiousness_scores': 4
}

# Step 3: Apply the weights to the scores and calculate a total weighted score
# Create a new DataFrame to store the weighted scores
weighted_scores = data.copy()

for trait, weight in weights.items():
    weighted_scores[trait] = data[trait] * weight

# Add a new column for the total score
weighted_scores['total_score'] = weighted_scores[list(weights.keys())].sum(axis=1)

# Step 4: Identify the potential leader
# Find the index of the individual with the highest total score
leader_index = weighted_scores['total_score'].idxmax()

# Get the ID of the potential leader from the original data
leader_id = data.iloc[leader_index]['ID']

# Print out the ID of the selected leader and their scores for review
print("Selected Leader ID:", leader_id)
print("Scores of the selected leader:")
print(data.iloc[leader_index])

# If you want to view the entire DataFrame with weighted scores and total scores, you can do so:
print("\nData with weighted scores:")
print(weighted_scores)


third page is the page that gives the result of what proejct and the team formation